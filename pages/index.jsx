import React, { useRef } from "react";
import Head from "next/head";
import { useAccount, useBalance,useConnect, useSignMessage, useDisconnect } from 'wagmi'
import { verifyMessage } from 'ethers/lib/utils'
import Contract from "./contract";


export const useIsMounted = () => {
	const [mounted, setMounted] = React.useState(false)
	React.useEffect(() => setMounted(true), [])
	return mounted
}

export default function Home() {
	const isMounted = useIsMounted()
	const {
		activeConnector,
		connect,
		connectors,
		error: connectError,
		isConnecting,
		pendingConnector,
	} = useConnect()
	const { data: accountData, isError, isLoading: accountLoad } = useAccount()
	
	const recoveredAddress = useRef('')
	const { data: signData, error: signError, isLoading: signLoading, signMessage } = useSignMessage({
		onSuccess(data, variables) {
		  // Verify signature when sign message succeeds
			const address = verifyMessage(variables.message, data)
			recoveredAddress.current = address
		},
	})

	const { data: balanceData, isError: balanceError, isLoading: balanceLoading }  = useBalance({
		addressOrName: accountData?.address,
	})

	const { disconnect } = useDisconnect()

	console.log(signData)
	console.log(recoveredAddress, " -> ", accountData?.address.toLowerCase() == recoveredAddress.current.toLowerCase())

	const submitSign = (e) => {
		e.preventDefault()
		signMessage({ message: 'gm frens' })
	}

	return (
		<div>
			<Head>
				<title>Boilerplate for contract interaction</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main className="flex flex-col justify-center items-center min-h-screen">
				<h1 className="text-4xl font-bold">Connect wallet!</h1>
				
				{
					(isMounted && !accountData) && (
						connectors.map((x) => (
							<button disabled={!x.ready} key={x.id} onClick={() => connect(x)}>
								{x.name}
								{isConnecting && pendingConnector?.id === x.id && ' (connecting)'}
							</button>
						))
					)
				}

				{
					(accountData) && (
						<div>
							<button onClick={(e) => submitSign(e)}>
								Sign message
							</button>
							{/* <button disabled={signLoad} onClick={() => signMessage()}>
								Sign message
							</button> */}
							{/* {signSuccess && <div>Signature: {signData}</div>}
							{signError && <div>Error signing message</div>} */}
						</div>
					)
				}

				{(accountData && accountData?.address.toLowerCase() == recoveredAddress.current.toLowerCase()) && (
					<div className="flex flex-col justify-center items-center">
						<div className="mt-2 flex flex-col">
							<p>Connected Account:  
								{accountData.ens?.name
							? `${accountData.ens?.name} (${accountData.address})`
							: accountData.address}</p>
							<p>Balance: {balanceLoading && 'Loading...'} {balanceData?.formatted} {balanceData?.symbol}</p>
						</div>
						<button 
							className="my-2 px-2 py-1 border rounded-xl bg-black text-white hover:bg-white hover:text-black"
							onClick={disconnect}
						>Disconnect</button>
						<Contract />
					</div>
				)}

				{connectError && <div>{connectError?.message ?? 'Failed to connect'}</div>}
			</main>
		</div>
	);
}
